public class ParkLocator {
    public static String[] country(String countryName) {
        ParkService.ParksImplPort  park = new ParkService.ParksImplPort ();
        return park.byCountry('Japan') ;
    }
}




@isTest
private class ParkLocatorTest {
    @isTest static void testCallout() {              
        // This causes a fake response to be generated
        Test.setMock(WebServiceMock.class, new ParkServiceMock());
        // Call the method that invokes a callout
        String country = 'Japan';
        String[] result = ParkLocator.country('Japan');
        // Verify that a fake result is returned
        String[] fakeResult = new String[]{'Tokyo','Osaka'};
        System.assertEquals(fakeResult, result); 
    }
}




@isTest
global class ParkServiceMock implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
        // start - specify the response you want to send
        ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();
        String[] parksArray = new String[]{'Tokyo','Osaka'};
        response_x.return_x = parksArray;
        // end
        response.put('response_x', response_x); 
   }
}